<?php

namespace FarmBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository
{

    /**
     * retourne les produits a afficher dans le catalogue
     * fait la jointure avec les catagories pour éviter les requêtes multiples
     */
    public function findCatalogProducts($idCategory = null)
    {
        /*
        $dql = "SELECT p, c, i
                FROM \FarmBundle\Entity\Product p
                LEFT JOIN p.category c
                LEFT JOIN p.images i
                WHERE p.isActive = true
                ORDER BY p.dateCreated DESC";

        $query = $this->getEntityManager()->createQuery($dql);
        */

        // le from est sous-entendu, car on est dans le product repository
        $qb = $this->createQueryBuilder('p');
        $qb ->addSelect('c')
            ->addSelect('i')
            ->andWhere("p.isActive = true")
            ->addOrderBy("p.dateCreated", "DESC")
            ->leftJoin("p.category", "c")
            ->leftJoin("p.images", "i");

        // si on a un filtre sur la catégorie, on ajoute une clause where
        if ($idCategory){
            $qb->andWhere("p.category = :category");
            //on aurai du passer l'objet category en entier
            $qb->setParameter("category", $idCategory);
        }


        $query = $qb->getQuery();

        // limit les résultats
        $query->setMaxResults(30);
        //offset
        //$query->setFirstResult(10);

        //$products = $query->getResult();
        //return $products;

        // pour que le nombre de résultat soit ok malgré les jointures avec les images
        $paginator = new Paginator($query, $fetchJoinCollection = true);
        return $paginator;
    }

}
